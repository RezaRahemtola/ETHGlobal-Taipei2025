// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, formDataBodySerializer } from '@hey-api/client-axios';
import type { GetAuthMessageAuthMessagePostData, GetAuthMessageAuthMessagePostResponse, GetAuthMessageAuthMessagePostError, LoginWithWalletAuthLoginPostData, LoginWithWalletAuthLoginPostResponse, LoginWithWalletAuthLoginPostError, RegisterUserAuthRegisterPostData, RegisterUserAuthRegisterPostResponse, RegisterUserAuthRegisterPostError, CheckUsernameAuthAvailableEnsUsernameGetData, CheckUsernameAuthAvailableEnsUsernameGetResponse, CheckUsernameAuthAvailableEnsUsernameGetError, IsRegisteredAuthIsRegisteredGetData, IsRegisteredAuthIsRegisteredGetResponse, IsRegisteredAuthIsRegisteredGetError, GetAvatarUserAvatarGetData, GetAvatarUserAvatarGetResponse, GetAvatarUserAvatarGetError, ChangeAvatarUserAvatarPostData, ChangeAvatarUserAvatarPostResponse, ChangeAvatarUserAvatarPostError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Get Auth Message
 * Get the static message for wallet signature authentication.
 */
export const getAuthMessageAuthMessagePost = <ThrowOnError extends boolean = false>(options: Options<GetAuthMessageAuthMessagePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GetAuthMessageAuthMessagePostResponse, GetAuthMessageAuthMessagePostError, ThrowOnError>({
        url: '/auth/message',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Login With Wallet
 * Authenticate with a wallet signature.
 */
export const loginWithWalletAuthLoginPost = <ThrowOnError extends boolean = false>(options: Options<LoginWithWalletAuthLoginPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<LoginWithWalletAuthLoginPostResponse, LoginWithWalletAuthLoginPostError, ThrowOnError>({
        url: '/auth/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Register User
 * Adds an ENS subname to a user and creates the user in the database
 */
export const registerUserAuthRegisterPost = <ThrowOnError extends boolean = false>(options: Options<RegisterUserAuthRegisterPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RegisterUserAuthRegisterPostResponse, RegisterUserAuthRegisterPostError, ThrowOnError>({
        url: '/auth/register',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Check Username
 */
export const checkUsernameAuthAvailableEnsUsernameGet = <ThrowOnError extends boolean = false>(options: Options<CheckUsernameAuthAvailableEnsUsernameGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CheckUsernameAuthAvailableEnsUsernameGetResponse, CheckUsernameAuthAvailableEnsUsernameGetError, ThrowOnError>({
        url: '/auth/available-ens/{username}',
        ...options
    });
};

/**
 * Is Registered
 * Check if a user is registered both on ENS and in the database
 */
export const isRegisteredAuthIsRegisteredGet = <ThrowOnError extends boolean = false>(options?: Options<IsRegisteredAuthIsRegisteredGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<IsRegisteredAuthIsRegisteredGetResponse, IsRegisteredAuthIsRegisteredGetError, ThrowOnError>({
        url: '/auth/is-registered',
        ...options
    });
};

/**
 * Get Avatar
 * Get the avatar URL
 */
export const getAvatarUserAvatarGet = <ThrowOnError extends boolean = false>(options?: Options<GetAvatarUserAvatarGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAvatarUserAvatarGetResponse, GetAvatarUserAvatarGetError, ThrowOnError>({
        url: '/user/avatar',
        ...options
    });
};

/**
 * Change Avatar
 * Create or update the avatar (using ENS text records
 */
export const changeAvatarUserAvatarPost = <ThrowOnError extends boolean = false>(options: Options<ChangeAvatarUserAvatarPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ChangeAvatarUserAvatarPostResponse, ChangeAvatarUserAvatarPostError, ThrowOnError>({
        ...formDataBodySerializer,
        url: '/user/avatar',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};